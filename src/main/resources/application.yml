spring:
  config:
    import: aws-secretsmanager:buildoptima/default

  datasource:
    username: ${postgres.username}
    password: ${postgres.password}
    url: jdbc:postgresql://${postgres.host}:${postgres.port}/${postgres.dbName}?currentSchema=${postgres.schemaName}

  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        show_sql: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 100
        order_inserts: true
        order_updates: true
    open-in-view: false

  flyway:
    locations:
      - classpath:db/migration

springdoc:
  api-docs:
    path: /api-docs


server:
  port: 80
  servlet:
    context-path: /api/v1

cloud:
  aws:
    region:
      auto: false
      static: ${aws.default.region}
      use-default-aws-region-chain: true
    credentials:
      use-default-aws-credentials-chain: true
    stack:
      auto: false


platform:
  security:
    jwt:
      issuer: ${authorization.issuer}
      signatureAlgorithm: ${authorization.signature-algorithm}
      authorizationHeader: ${authorization.header}
      authorizationHeaderPrefix: ${authorization.header.prefix}
      accessToken:
        validity: ${authorization.access-token.validity} #minutes
      refreshToken:
        validity: ${authorization.refresh-token.validity} #hours

aws:
  properties:
    s3:
      imageBucketName: ${aws.s3.image-bucket.name}
      dataBucketName: ${aws.s3.data-bucket.name}
      webBucketName: ${aws.s3.web-bucket.name}

logging:
  level:
    com:
      amazonaws:
        internal:
          com.amazonaws.internal.InstanceMetadataServiceResourceFetcher: error
        util:
          EC2MetadataUtils: error
    org:
      springframework:
        security: off

sqs:
  propertyQueueName: ${aws.sqs.property-queue.name}
  mailQueueUrl: https://sqs.${aws.sqs.region}.amazonaws.com/${aws.account.id}/${aws.sqs.mail-queue.name}

secrets-manager:
  privateKeySecret: ${authorization.private-key}

page:
  skip: 0
  take: 10